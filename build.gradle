buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    // Querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    //node
    id 'com.github.node-gradle.node' version '3.4.0'

}

apply plugin: "com.ewerk.gradle.plugins.querydsl"
apply plugin: 'java'

// node
apply plugin: 'com.github.node-gradle.node'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'nowpt'
sourceCompatibility = '11'


allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.projectlombok:lombok'

    // 오라클 클라우드에 접속하기 위한 라이브러리 추가
    implementation ('com.oracle.ojdbc:ojdbc8:19.3.0.0'){
        exclude group: 'com.oracle.ojdbc', module: 'simplefan'
        exclude group: 'com.oracle.ojdbc', module: 'ons'
    }
    implementation 'com.oracle.database.security:osdt_cert'
    implementation 'com.oracle.database.security:oraclepki'
    implementation 'com.oracle.database.security:osdt_core'

    //jpa & queryDSL
    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //security
//    implementation 'org.springframework.boot:spring-boot-starter-security'

    //thymeleaf
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'


}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}




// React Build
def webappDir = "$projectDir/src/main/frontend"

node {
    version = '16.17.0'
    npmVersion = '8.15.0'
    download = true
    nodeProjectDir = file("${project.projectDir}/src/main/frontend")
//    workDir = file("${project.projectDir}/src/main/frontend/build/nodejs")
//    npmWorkDir = file("${project.projectDir}/src/main/frontend/build/npm")
}

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "copyWebApp"
}

task copyWebApp(type: Copy) {
    dependsOn "buildReact"
    from "$webappDir/build"
    into "$projectDir/src/main/resources/static"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "audit", "fix"
        commandLine "npm", "install"
    }
}
//
//




// querydsl 설정
//def querydslDir = "src/main/generated/queryDsl"
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

/**
 * comileQuerydsl.doFirst 추가
 */
compileQuerydsl.doFirst {
    if(file(querydslDir).exists() )
        delete(file(querydslDir))
}
//querydsl 추가 끝


