buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    // Querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // moowork.node 추가
    id "com.github.node-gradle.node" version "3.1.1"
}

apply plugin: "com.ewerk.gradle.plugins.querydsl"

// node
//apply plugin: "com.moowork.node"
apply plugin: 'com.github.node-gradle.node'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'nowpt'
sourceCompatibility = '11'


allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.projectlombok:lombok'

    // 오라클 클라우드에 접속하기 위한 라이브러리 추가
//    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    implementation ('com.oracle.ojdbc:ojdbc8:19.3.0.0'){
        exclude group: 'com.oracle.ojdbc', module: 'simplefan'
        exclude group: 'com.oracle.ojdbc', module: 'ons'
    }
    implementation 'com.oracle.database.security:osdt_cert'
    implementation 'com.oracle.database.security:oraclepki'
    implementation 'com.oracle.database.security:osdt_core'

    //jpa & queryDSL
    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //security
//    implementation 'org.springframework.boot:spring-boot-starter-security'

    //thymeleaf
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'


}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// querydsl 설정
//def querydslDir = "src/main/generated/queryDsl"
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

/**
 * comileQuerydsl.doFirst 추가
 */
compileQuerydsl.doFirst {
    if(file(querydslDir).exists() )
        delete(file(querydslDir))
}
//querydsl 추가 끝


// React
def webappDir = "$projectDir/frontend/my-app"

task appNpmInstall(type: NpmTask) {
    workingDir = file("${webappDir}")
    args = ["run", "build"]
}

task copyWebApp(type: Copy) {
    from 'frontend/my-app/build'
    into "build/resources/main/static"
}

copyWebApp.dependsOn(appNpmInstall)
compileJava.dependsOn(copyWebApp)





//
// 이 부분이 추가.
//tasks.withType(JavaCompile) {
//    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
//}