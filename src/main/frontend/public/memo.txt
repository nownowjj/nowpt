여기서도 중요한 것이 있습니다. 그냥 useMutation을 통해서 데이터만 업데이트하게 되면, 서버에만 데이터 수정사항을 보내는 것입니다.
프론트에서는 데이터가 fresh하지 않기 때문에 test5가 추가된 것을 모릅니다.
이럴 경우 사용자 경험이 좋지 않습니다

보통 이럴 경우에는 2가지 방법이 있는데
1. get을 한번 더 해서 리스트를 초기화한다.
2. useState를 활용, 기존 Array에 push 해서 setState를 해준다.
1안 같은 경우에는 서버의 리소스를 사용하는 거라 지양하고 2안을 지향합니다.
하지만 2안을 하려면 매우 귀찮은 짓을 해야 하는데, React Query에서는 그나마 편하게 바꿔줄 수 있습니다.



retry (boolean | number | (failureCount: number, error: TError) => boolean)
default : 3회
실패한 쿼리를 재시도하는 옵션이다.
true 로 설정하면 쿼리 실패시 무한 재시도하고 false 로 설정하면 재시도를 하지 않는다.

staleTime (number | Infinity)
default : 0
해당 시간이 지나면 stale 상태가 된다.
데이터가 fresh 상태로 유지되는 (stale 상태가 되기까지의) 시간이다.
- fresh 상태에서는 다시 mount 되어도 fetch가 실행되지 않는다.

cacheTime (number | Infinity)
default : 5분
inactive 상태인 캐시 데이터가 메모리에 남아있는 시간이다. 이 시간이 지나면 캐시 데이터는 가비지 컬렉터에 의해 메모리에서 제거된다.

refetchInterval: 2000, 일정 시간마다 자동으로 refetch를 시켜준다. ms 단위로 설정해줄 수 있다.

refetchIntervalInBackground : 브라우저에 focus 되어있지 않아도 refetch가 되게해준다. true 값을 설정해주면된다.

refetchOnMount (boolean | "always")
default : true
데이터가 stale 상태일 경우 마운트 시 마다 refetch를 실행하는 옵션이다.
always 로 설정하면 마운트 시 마다 매번 refetch 를 실행한다.

refetchOnWindowFocus (boolean | "always")
default : true
데이터가 stale 상태일 경우 윈도우 포커싱 될 때 마다 refetch를 실행하는 옵션이다.
always 로 설정하면 항상 윈도우 포커싱 될 때 마다 refetch를 실행한다는 의미이다.

refetchOnReconnect (boolean | "always")
default : true
데이터가 stale 상태일 경우 재 연결될 때 refetch를 실행하는 옵션이다.
always 도 위에 두 옵션 처럼 쿼리가 매번 재 연결될 때 마다 refetch를 실행한다.

onSuccess ((data: TDdata) => void)
쿼리 성공 시 실행되는 함수이다.
매개변수 data는 성공 시 서버에서 넘어오는 response 값이다.

onError ((error: TError) => void)
쿼리 실패 시 실행되는 함수이다.
매개변수로 에러 값을 받을 수 있다.

onSettled ((data?: TData, error?: TError) => void)
쿼리가 성공하면 성공한 데이터가 전달되거나, 실패하면 에러가 전달 될 때 실행되는 함수이다.
매개변수로 성공 시엔 성공 데이터, 실패 시에는 에러가 전달된다.

initialData (TData | () => TData)
initialData 를 설정하면 쿼리 캐시의 초기 데이터로 사용된다. (쿼리가 아직 생성되지 않았거나 캐시되지 않았을 때)
staleTime 이 설정되지 않은 경우 초기 데이터는 기본적으로 stale 상태로 간주한다.


useMutation
데이터 변경 및 삭제 하는 메서드
POST, PUT, DELETE와 같은 변경 및 수정 작업을 할 때 사용되는 훅이다.


❗️쿼리 무효화(Invalidation)
Add 후 수동적으로 Fetch를 해줘야 화면에 보여진다는 불편함이 있다.
이 문제점을 해결하기 위해서는 쿼리 무효화(Invalidation) 를 시켜줘야 한다.
이 전에 캐싱된 쿼리를 직접 무효화 시킨 후 데이터를 새로 패칭해줄 수 있다.

  const { mutate: addHero, isLoading, isError, error } = useMutation(addSuperHero, {
    onSuccess: () => {
    // 캐시가 있는 모든 쿼리 무효화
    ✅ queryClient.invalidateQueries();

    // queryKey가 'super-heroes'로 시작하는 모든 쿼리 무효화
    ✅ queryClient.invalidateQueries('super-heroes');
    }
  });

  const handleAddHeroClick = () => {
    const hero = { 이름, 성별 };
    addHero(hero);
  };